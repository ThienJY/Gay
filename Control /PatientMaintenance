package Control;

//@author Yung Ka Leong 24SMR06234

import ADT.*;
import Entity.Patient;
import Utility.PatientFile;
import Boundary.PatientMaintenanceUI;

public class PatientMaintenance {
    private QueueInterface<Patient> patientQueue = new LinkedQueue<>();
    private PatientFile patientFile = new PatientFile();
    private PatientMaintenanceUI UI = new PatientMaintenanceUI();
    
    public PatientMaintenance(){
        patientQueue = patientFile.readFromFile();
    }
    
    public void testPatientMaintenance(){
        int select;
        while(true){
            select = UI.getMenuSelect();
            
            switch(select){
                case 1:
                    patientRegister();
                    break;
                case 2:
                    System.out.println();
                    System.out.println("*** The first patient details ***");
                    viewPatientDetail(getFirstPatient());
                    break;
                case 3:
                    System.out.println();
                    System.out.println("*** Removed patient details ***");
                    viewPatientDetail(removeFirstPatient());
                    break;
                case 4:
                    patientFile.saveToFile(patientQueue);
                    System.out.println("Exit...");
                    System.exit(0);
                default:
                    System.out.println("-- Unknown Option! Please select again. --");
                    break;
            }
        }
    }
    
    public void addNewPatient(Patient newPatient){
        patientQueue.enqueue(newPatient);
        patientFile.saveToFile(patientQueue);
        
        System.out.println("New Patient was added in the Queuring");
    }
    
    public void patientRegister(){
        Patient newPatient = UI.newPatientDetail();
        
        System.out.println();
        System.out.println("*** Patient Details ***");
        viewPatientDetail(newPatient);
        boolean isConfirm = UI.getConfirm();
        
        if(isConfirm){
            addNewPatient(newPatient);
        }
        else{
            System.out.println("The Registration is Cancel.");
        }
    }
    
    public Patient removeFirstPatient(){
        Patient removedPatient = patientQueue.dequeue();
        patientFile.saveToFile(patientQueue);
        return removedPatient;
    }
    
    public Patient getFirstPatient(){
        return patientQueue.getFront();
    }
    
    public void viewPatientDetail(Patient givenPatient){
        if(givenPatient != null){
            System.out.println(givenPatient.toString());
        }
        else{
            System.out.println("-- The patient object is empty! --");
        }
    }
    
    public void reportSummary(){
        if(patientQueue.isEmpty()){
            System.out.println("-- The patient queue is empty! --");
        }
        else{
            Patient[] patients = patientQueue.getArray();
            System.out.println("*** Summary of the Patient Queue ***");
            for(int i = 1; i <= patients.length; i++){
                System.out.printf("%d. %s [%s], Age: %d", 
                i, patients[i].getName(), patients[i].getGender(), patients[i].getAge());
            }
        }
        
    }
    
    public static void main(String[] args){
        PatientMaintenance patientM = new PatientMaintenance();
        patientM.testPatientMaintenance();
    }
}
